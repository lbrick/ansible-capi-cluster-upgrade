---
- name: Get Latest KubeadmControlplane
  hosts: localhost
  vars:
    capi_image_name: "rocky-9-containerd-{{ kubernetes_version }}"
    version_suffix: "{{ kubernetes_version | replace('.', '') }}"
  tasks:
    - name: Assert required variables are set
      assert:
        that:
          - kubeconfig_path is defined
          - cluster_name is defined
          - kubernetes_version is defined
        fail_msg: "You must provide kubeconfig_path, cluster_name, and kubernetes_version as extra_vars"

    - name: Ensure dry_run has a default
      set_fact:
        dry_run: "{{ dry_run | default(true) }}"

    - name: Show dry run status
      debug:
        msg: "Dry run is {{ dry_run | bool }}"

    - name: Get MachineTemplates
      shell: >-
        kubectl --kubeconfig {{ kubeconfig_path }} get kubeadmcontrolplane
      register: kubeadm_controlplane

    - name: Extract template names matching cluster name
      set_fact:
        matching_templates: >-
          {{ kubeadm_controlplane.stdout_lines[1:] | select("search", cluster_name) | list }}

    - name: Extract just the names
      set_fact:
        template_names: >-
          {{ matching_templates | map('regex_replace', '\s+.*$', '') | list }}

    - name: Dump each OpenStackMachineTemplate to a YAML file
      shell: >
        kubectl --kubeconfig {{ kubeconfig_path }}
        get kubeadmcontrolplane {{ item }} -o yaml > orig/orig_kubeadmcontrolplane_{{ item }}.yaml
      loop: "{{ template_names }}"

    - name: Show matching templates
      debug:
        var: template_names

    - name: Slurp original YAML files into memory
      slurp:
        src: "orig/orig_kubeadmcontrolplane_{{ item }}.yaml"
      register: slurped_yaml
      loop: "{{ template_names }}"

    - name: Debug split version parsing
      debug:
        msg:
          - "Original: {{ kubernetes_version }}"
          - "Cleaned: {{ kubernetes_version_clean }}"
          - "Version parts: {{ version_parts }}"
          - "Major.minor: {{ major_minor }}"
      vars:
        kubernetes_version_clean: "{{ kubernetes_version | regex_replace('^v', '') }}"
        version_parts: "{{ kubernetes_version_clean.split('.') }}"
        major_minor: "{{ (version_parts[0] + '.' + version_parts[1]) | float }}"

    - name: Decode, update YAML, and save in a variable
      set_fact:
        updated_yaml_list: "{{ updated_yaml_list | default([]) + [ { 'name': item.item, 'yaml': updated_yaml } ] }}"
      vars:
        # Extract major.minor version using split - SIMPLER AND MORE RELIABLE
        kubernetes_version_clean: "{{ kubernetes_version | regex_replace('^v', '') }}"
        version_parts: "{{ kubernetes_version_clean.split('.') }}"
        major_minor: "{{ (version_parts[0] + '.' + version_parts[1]) | float }}"
        
        decoded_yaml: "{{ item.content | b64decode | from_yaml }}"
        
        base_updates:
          spec:
            machineTemplate:
              infrastructureRef:
                name: "{{ item.item }}-{{ version_suffix }}"
            version: "{{ kubernetes_version }}"
        
        # First combine the base updates
        combined_yaml: "{{ decoded_yaml | combine(base_updates, recursive=true) }}"
        
        # Conditionally remove cloud-provider using a proper approach
        updated_yaml: >-
          {% set y = combined_yaml %}
          {% if major_minor | float >= 1.33 %}
            {% if y.spec is defined 
                  and y.spec.kubeadmConfigSpec is defined 
                  and y.spec.kubeadmConfigSpec.clusterConfiguration is defined 
                  and y.spec.kubeadmConfigSpec.clusterConfiguration.apiServer is defined 
                  and y.spec.kubeadmConfigSpec.clusterConfiguration.apiServer.extraArgs is defined 
                  and 'cloud-provider' in y.spec.kubeadmConfigSpec.clusterConfiguration.apiServer.extraArgs %}
              {% set _ = y.spec.kubeadmConfigSpec.clusterConfiguration.apiServer.extraArgs.pop('cloud-provider') %}
            {% endif %}
          {% endif %}
          {{ y | to_nice_yaml }}
      loop: "{{ slurped_yaml.results }}"

    - name: Write updated YAML files to disk
      copy:
        content: "{{ item.yaml | trim }}"
        dest: "updated/updated_kubeadmcontrolplane_{{ item.name }}.yaml"
      loop: "{{ updated_yaml_list }}"

    - name: Dry run mode enabled
      debug:
        msg: "Dry run enabled, skipping kubectl apply"
      when: dry_run | bool

    - name: Apply updated templates
      command: kubectl apply --kubeconfig {{ kubeconfig_path }} -f updated/updated_kubeadmcontrolplane_{{ item }}.yaml
      loop: "{{ template_names }}"
      when: not dry_run | bool
